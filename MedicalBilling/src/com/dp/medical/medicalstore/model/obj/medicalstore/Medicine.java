package com.dp.medical.medicalstore.model.obj.medicalstore;

import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.proxy.HibernateProxy;

import com.dp.medical.medicalstore.model.obj.medicalstore.iface.IMedicine;


/** 
 * Object mapping for hibernate-handled table: medicine.
 * @author autogenerated
 */

@Entity
@Table(name = "medicine", catalog = "medicalstore")
public class Medicine implements Cloneable, Serializable, IMedicine {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558955767L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Integer available;
	/** Field mapping. */
	private String description;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String name;
	/** Field mapping. */
	private Set<Purchaseinvoicedetails> purchaseinvoicedetailss = new HashSet<Purchaseinvoicedetails>();

	/** Field mapping. */
	private Set<Salesinvoicedetails> salesinvoicedetailss = new HashSet<Salesinvoicedetails>();

	/** Field mapping. */
	private Supplier supplierid;
	/** Field mapping. */
	private String unit;
	/** Field mapping. */
	private Double unitprice;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Medicine() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Medicine(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param id Integer object;
	 * @param name String object;
	 * @param supplierid Supplier object;
	 * @param unit String object;
	 */
	public Medicine(Integer id, String name, Supplier supplierid, 					
			String unit) {

		this.id = id;
		this.name = name;
		this.supplierid = supplierid;
		this.unit = unit;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Medicine.class;
	}
 

    /**
     * Return the value associated with the column: available.
	 * @return A Integer object (this.available)
	 */
	public Integer getAvailable() {
		return this.available;
		
	}
	

  
    /**  
     * Set the value related to the column: available.
	 * @param available the available value you wish to set
	 */
	public void setAvailable(final Integer available) {
		this.available = available;
	}

    /**
     * Return the value associated with the column: description.
	 * @return A String object (this.description)
	 */
	@Basic( optional = true )
	@Column( length = 65535  )
	public String getDescription() {
		return this.description;
		
	}
	

  
    /**  
     * Set the value related to the column: description.
	 * @param description the description value you wish to set
	 */
	public void setDescription(final String description) {
		this.description = description;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "id", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: name.
	 * @return A String object (this.name)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 200  )
	public String getName() {
		return this.name;
		
	}
	

  
    /**  
     * Set the value related to the column: name.
	 * @param name the name value you wish to set
	 */
	public void setName(final String name) {
		this.name = name;
	}

    /**
     * Return the value associated with the column: purchaseinvoicedetails.
	 * @return A Set&lt;Purchaseinvoicedetails&gt; object (this.purchaseinvoicedetails)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "medicineid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Purchaseinvoicedetails> getPurchaseinvoicedetailss() {
		return this.purchaseinvoicedetailss;
		
	}
	
	/**
	 * Adds a bi-directional link of type Purchaseinvoicedetails to the purchaseinvoicedetailss set.
	 * @param purchaseinvoicedetails item to add
	 */
	public void addPurchaseinvoicedetails(Purchaseinvoicedetails purchaseinvoicedetails) {
		purchaseinvoicedetails.setMedicineid(this);
		this.purchaseinvoicedetailss.add(purchaseinvoicedetails);
	}

  
    /**  
     * Set the value related to the column: purchaseinvoicedetails.
	 * @param purchaseinvoicedetails the purchaseinvoicedetails value you wish to set
	 */
	public void setPurchaseinvoicedetailss(final Set<Purchaseinvoicedetails> purchaseinvoicedetails) {
		this.purchaseinvoicedetailss = purchaseinvoicedetails;
	}

    /**
     * Return the value associated with the column: salesinvoicedetails.
	 * @return A Set&lt;Salesinvoicedetails&gt; object (this.salesinvoicedetails)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "medicineid"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Salesinvoicedetails> getSalesinvoicedetailss() {
		return this.salesinvoicedetailss;
		
	}
	
	/**
	 * Adds a bi-directional link of type Salesinvoicedetails to the salesinvoicedetailss set.
	 * @param salesinvoicedetails item to add
	 */
	public void addSalesinvoicedetails(Salesinvoicedetails salesinvoicedetails) {
		salesinvoicedetails.setMedicineid(this);
		this.salesinvoicedetailss.add(salesinvoicedetails);
	}

  
    /**  
     * Set the value related to the column: salesinvoicedetails.
	 * @param salesinvoicedetails the salesinvoicedetails value you wish to set
	 */
	public void setSalesinvoicedetailss(final Set<Salesinvoicedetails> salesinvoicedetails) {
		this.salesinvoicedetailss = salesinvoicedetails;
	}

    /**
     * Return the value associated with the column: supplierid.
	 * @return A Supplier object (this.supplierid)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "SupplierId", nullable = false )
	public Supplier getSupplierid() {
		return this.supplierid;
		
	}
	

  
    /**  
     * Set the value related to the column: supplierid.
	 * @param supplierid the supplierid value you wish to set
	 */
	public void setSupplierid(final Supplier supplierid) {
		this.supplierid = supplierid;
	}

    /**
     * Return the value associated with the column: unit.
	 * @return A String object (this.unit)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 20  )
	public String getUnit() {
		return this.unit;
		
	}
	

  
    /**  
     * Set the value related to the column: unit.
	 * @param unit the unit value you wish to set
	 */
	public void setUnit(final String unit) {
		this.unit = unit;
	}

    /**
     * Return the value associated with the column: unitprice.
	 * @return A Double object (this.unitprice)
	 */
	public Double getUnitprice() {
		return this.unitprice;
		
	}
	

  
    /**  
     * Set the value related to the column: unitprice.
	 * @param unitprice the unitprice value you wish to set
	 */
	public void setUnitprice(final Double unitprice) {
		this.unitprice = unitprice;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Medicine clone() throws CloneNotSupportedException {
		
        final Medicine copy = (Medicine)super.clone();

		copy.setAvailable(this.getAvailable());
		copy.setDescription(this.getDescription());
		copy.setId(this.getId());
		copy.setName(this.getName());
		if (this.getPurchaseinvoicedetailss() != null) {
			copy.getPurchaseinvoicedetailss().addAll(this.getPurchaseinvoicedetailss());
		}
		if (this.getSalesinvoicedetailss() != null) {
			copy.getSalesinvoicedetailss().addAll(this.getSalesinvoicedetailss());
		}
		copy.setSupplierid(this.getSupplierid());
		copy.setUnit(this.getUnit());
		copy.setUnitprice(this.getUnitprice());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("available: " + this.getAvailable() + ", ");
		sb.append("description: " + this.getDescription() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("name: " + this.getName() + ", ");
		sb.append("unit: " + this.getUnit() + ", ");
		sb.append("unitprice: " + this.getUnitprice());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Medicine that; 
		try {
			that = (Medicine) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAvailable() == null) && (that.getAvailable() == null)) || (getAvailable() != null && getAvailable().equals(that.getAvailable())));
		result = result && (((getDescription() == null) && (that.getDescription() == null)) || (getDescription() != null && getDescription().equals(that.getDescription())));
		result = result && (((getName() == null) && (that.getName() == null)) || (getName() != null && getName().equals(that.getName())));
		result = result && (((getSupplierid() == null) && (that.getSupplierid() == null)) || (getSupplierid() != null && getSupplierid().getId().equals(that.getSupplierid().getId())));	
		result = result && (((getUnit() == null) && (that.getUnit() == null)) || (getUnit() != null && getUnit().equals(that.getUnit())));
		result = result && (((getUnitprice() == null) && (that.getUnitprice() == null)) || (getUnitprice() != null && getUnitprice().equals(that.getUnitprice())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
